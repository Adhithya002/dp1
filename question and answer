91. Decode Ways

A message containing letters from A-Z can be encoded into numbers using the following mapping:

'A' -> "1"
'B' -> "2"
...
'Z' -> "26"
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, "11106" can be mapped into:

"AAJF" with the grouping (1 1 10 6)
"KJF" with the grouping (11 10 6)
Note that the grouping (1 11 06) is invalid because "06" cannot be mapped into 'F' since "6" is different from "06".

Given a string s containing only digits, return the number of ways to decode it.

The test cases are generated so that the answer fits in a 32-bit integer.

class Solution {
    public int numDecodings(String s) {
         int [] dp=new int[s.length()];
        Arrays.fill(dp,-1);
        return num(s,0,dp);
    }
    public int num(String s,int i,int []dp){
        if(i==s.length()) return 1;
        if(dp[i]!=-1){
            return dp[i];
        }
        int sum=0;
        if(s.charAt(i)!='0'){
            int a=s.charAt(i)-'0';
            if(a>0){
              sum+=num(s,i+1,dp);
            }
            if((i+1)<s.length()){
                a=a*10+s.charAt(i+1)-'0';
                if(a<=26){
                    sum+=num(s,i+2,dp);
                }
            }
        }
        return dp[i]=sum;
    }
}

// by adhithya

279. Perfect Squares

Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.

 

Example 1:

Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.


class Solution {
    public int numSquares(int n) {
        // Shortest path stuff is generally breadth first search
        // Since we go one step at a time, the most efficient one is usually bfs
        // BFS is generally about going level by level, one step at a time, so first answer is the quickest
        
        // We perform the DFS step but one step at a time and for all :) [Refer Down]      
        Queue<Integer> queue= new LinkedList<>();
        HashSet <Integer> visit= new HashSet<>(); // To remove duplicate values in queue
        if (n>0)
            queue.add(n);
        int count=0;
        
        while (!queue.isEmpty())
        {
            count++;
            // Level Order Traversal
            int size= queue.size();
            for (int j=1; j<=size; j++)
           {  
                int value= queue.poll();
                int div= (int)Math.sqrt(value);
                
                for (int i=1; i<= div; i++)
                {   
                    if ((value-i*i)==0)
                        return count;

                    else if(visit.add(value-i*i))
                        queue.add(value-i*i);
                }
           }
            
        }
        
        return count;
        
    }
}

/*
DFS Solution:

public int numSquares(int n) 
    {
        Integer dp[]= new Integer[n+1];
        return solver(n, dp);        
    }
    
    public int solver(int value, Integer dp[])
    {
        if (value<=0)
            return 0;
        
        if (dp[value]!=null)
            return dp[value];
        
        int count=0, max=Integer.MAX_VALUE;
        int div= (int)Math.sqrt(value);
        
        for (int i=1; i<= div; i++)
        {
          count= 1+ solver(value-i*i, dp);
          max= Math.min(max, count);
        }
        
        return dp[value]=max;
    }
*/


509. Fibonacci Number

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.

class Solution 
{
    public int fib(int n) 
    {/* Declare an array to store Fibonacci numbers. */
        int[] f=new int[n+2];// 1 extra to handle case, n = 0
        int i;
        f[0]=0;/* 0th and 1st number of the series are 0 and 1*/
        f[1]=1;
        for(i=2;i<=n;i++)
        {/* Add the previous 2 numbers in the series
         and store it */
            f[i]=f[i-1]+f[i-2];//dp
        }
        return f[n];
    }
}


70. Climbing Stairs

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 
class Solution {
    public int climbStairs(int n) {
        if(n==1) return 1;
        
        if(n==2) return 2;

        int[] a =  new int[n];
        a[0]=1;
        a[1]=2;

        for(int i=2;i<n;i++){
            a[i]=a[i-1]+a[i-2];
        }
        return a[n-1];
    }
}
